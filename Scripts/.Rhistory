}
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
betas <- c(-.5,-.5,.5)
rho <- .8
betas <- c(-.5, 1, -.5,.5)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
betas <- c(-.5, 1, -1,.5)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
betas <- c(-.5, 1, -.5, .65)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
stan_d <- list( N = nrow(y.df), P = ncol(X),
Time = nrow(X),
Julian = y.df$Julian,
X= X,
Y= y.df$Count, offset = y.df$Offset )
ar_output3 <- stan( 'Scripts/Stan/Ar_take_3.stan',
data=stan_d, iter = 2000,
control = list(max_treedepth = 10))
nrow(X)
nrow(y.df)
hist(y.df$Offset)
min(y.df$Julian)
y.df$Julian <- y.df$Julian+1
stan_d <- list( N = nrow(y.df), P = ncol(X),
Time = nrow(X),
Julian = y.df$Julian,
X= X,
Y= y.df$Count, offset = y.df$Offset )
ar_output3 <- stan( 'Scripts/Stan/Ar_take_3.stan',
data=stan_d, iter = 2000,
control = list(max_treedepth = 10))
log(.4)
y.df$Count
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
ulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round(exp(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 ) ))
}
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round(exp(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 ) ))
}
y.df <- data.frame( Julian = weather.df$Julian )
y.df$Count <- NA
y.df$Offset <- rbeta(nrow(y.df),9,3)
## establising known parameters
betas <- c(-.5, 1, -.5, .65)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
# simulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round(exp(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 ) ))
}
y.df %>% ggplot(aes(x=Julian, y= ((Count) ))) + geom_point()
y.df$Count[i] <- exp(rnorm( 1,(r[i])*y.df$Offset[i] ,sigma),0 )
y.df <- data.frame( Julian = weather.df$Julian )
y.df$Count <- NA
y.df$Offset <- rbeta(nrow(y.df),9,3)
## establising known parameters
betas <- c(-.5, 1, -.5, .65)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
# simulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round( exp( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
,0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= exp((Count) ))) + geom_point()
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round( exp( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
,0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= ((Count) ))) + geom_point()
View(y.df)
y.df$Count[i] <- as.integer( round( ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
,0 ) )
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round( ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
,0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= ((Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round( ( rnorm( 1,(r[i])+y.df$Offset[i] ,sigma) )
,0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
ting data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <- as.integer( round( ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
,0 ) )
}
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
y.df$Julian <- y.df$Julian+1
# simulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <-  ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
}
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
## establising known parameters
betas <- c(-.5, 1.5, -.5, .65)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
# simulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <-  ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
}
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
y.df$rCount <- as.integer( rouund( exp(y.df$Count), 0 ))
y.df$rCount <- as.integer( round( exp(y.df$Count), 0 ))
y.df %>% ggplot(aes(x=Julian, y= log10(rCount ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= (rCount ))) + geom_point()
y.df <- data.frame( Julian = weather.df$Julian )
y.df$Count <- NA
y.df$Offset <- rbeta(nrow(y.df),9,3)
## establising known parameters
betas <- c(-.5, 1, -.5, .15)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
# simulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <-  ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
}
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
y.df$Julian <- y.df$Julian+1
y.df$rCount <- as.integer( round( exp(y.df$Count), 0 ))
y.df %>% ggplot(aes(x=Julian, y= (rCount ))) + geom_point()
testing to see if i can get these values back
stan_d <- list( N = nrow(y.df), P = ncol(X),
Time = nrow(X),
Julian = y.df$Julian,
X= X,
Y= y.df$rCount, offset = y.df$Offset )
ar_output3 <- stan( 'Scripts/Stan/Ar_take_3.stan',
data=stan_d, iter = 2000,
control = list(max_treedepth = 10))
print(ar_output3, pars = c("rho", 'beta'))
print(ar_output3, pars = c("rho", 'beta', 'sigma'))
betas <- c(-1, 1, -.5, .15)
rho <- .8
sigma <- 1.5
y.df <- y.df %>% arrange( Julian)
y.df$Count[1] <-0
r <- rep(NA, nrow(y.df)-1 )
# simulating data ?
for(i in 2:nrow(y.df)){
r[i] <- (sum(X[i-1,]*betas))+((y.df$Count[i-1])*rho)
y.df$Count[i] <-  ( rnorm( 1,(r[i])*y.df$Offset[i] ,sigma) )
}
y.df %>% ggplot(aes(x=Julian, y= (exp(Count) ))) + geom_point()
y.df %>% ggplot(aes(x=Julian, y= log10(exp(Count)+1 ))) + geom_point()
y.df$Julian <- y.df$Julian+1
y.df$rCount <- as.integer( round( exp(y.df$Count), 0 ))
y.df %>% ggplot(aes(x=Julian, y= (rCount ))) + geom_point()
ar_output3 <- stan( 'Scripts/Stan/Ar_take_3.stan',
data=stan_d, iter = 5000,
control = list(max_treedepth = 20))
## establising known parameters
betas <- c(-1, 1, -.5, .15)
rho <- .8
sigma <- 1.5
print(ar_output3, pars = c("rho", 'beta', "sigma"))
traceplot(ar_output3)
saveRDS(ar_output3 ,"bayes_sim.rds")
rho.df <- as.data.frame(post$rho)
colnames(rho.df) <- "Rho"
beta.df <- as.data.frame(post$beta)
colnames(beta.df) <- c("Intercept", "TMin", "PPT", "TMin:PPT")
beta.df <- cbind.data.frame(beta.df, rho.df)
beta.df <- tidyr::pivot_longer(beta.df, cols= 1:5, names_to="Parameters",
values_to = "Estimate")
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
known.df <- data.frame( Pars = as.factor(c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma")))
View(known.df)
betas <- c(-1, 1, -.5, .15)
rho <- .8
sigma <- 1.5
known.df <- data.frame( Pars = as.factor(c("Rho", "Intercept", "TMin", "PPT",
"T,-Min:PPT", "Sigma")),
Value = as.numeric(c(.8,-1,1,-.5,.15)) )
known.df <- data.frame( Pars = as.factor(c("Rho", "Intercept", "TMin", "PPT",
"T,-Min:PPT", "Sigma")),
Value = as.numeric(c(.8,-1,1,-.5,.15,1.5)) )
## plotting rho values
rho.df <- as.data.frame(post$rho)
colnames(rho.df) <- "Rho"
sig.df <- as.data.frame(post$sigma)
colnames(sig.df) <- "Sigma"
## plotting rho values
beta.df <- as.data.frame(post$beta)
colnames(beta.df) <- c("Intercept", "TMin", "PPT", "TMin:PPT")
beta.df <- cbind.data.frame(beta.df, rho.df)
beta.df <- tidyr::pivot_longer(beta.df, cols= 1:6, names_to="Parameters",
values_to = "Estimate")
beta.df <- cbind.data.frame(beta.df, sig.df)
beta.df <- tidyr::pivot_longer(beta.df, cols= 1:6, names_to="Parameters",
values_to = "Estimate")
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
beta.df$Parameters <- factor( beta.df$Parameters, level=c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma"))
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
geom_point(data=known.df, aes(x=Pars, y = Value),size=3, color="red")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
geom_point(data=known.df, aes(x=Pars, y = Value),size=3, color="red")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(sizedf$Parameters <- factor( beta.df$Parameters, level=c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma"))
= rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
known.df <- data.frame( Pars = as.factor(c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma")),
Value = as.numeric(c(.8,-1,1,-.5,.15,1.5)) )
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
geom_point(data=known.df, aes(x=Pars, y = Value),size=3, color="red")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
print(ar_output3, pars = c("rho", 'beta', "sigma"))
post <- extract(ar_output3)
rho.df <- as.data.frame(post$rho)
colnames(rho.df) <- "Rho"
sig.df <- as.data.frame(post$sigma)
colnames(sig.df) <- "Sigma"
beta.df <- as.data.frame(post$beta)
colnames(beta.df) <- c("Intercept", "TMin", "PPT", "TMin:PPT")
beta.df <- cbind.data.frame(beta.df, rho.df)
beta.df <- cbind.data.frame(beta.df, sig.df)
beta.df <- tidyr::pivot_longer(beta.df, cols= 1:6, names_to="Parameters",
values_to = "Estimate")
beta.df$Parameters <- factor( beta.df$Parameters, level=c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma"))
known.df <- data.frame( Pars = as.factor(c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma")),
Value = as.numeric(c(.8,-1,1,-.5,.15,1.5)) )
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
geom_point(data=known.df, aes(x=Pars, y = Value),size=3, color="red")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
plot.df <- y.df
plot.df <- as.data.frame(colMedians(as.matrix(post$m)))
test <- colQuantiles(as.matrix(post$m), probs=c(0.025,0.975))
plot.df$Q_2.5  <- test[,1]
plot.df$Q_97.5  <- test[,2]
plot.df$Julian <- 1:nrow(plot.df)
colnames(plot.df)[1] <- "Count"
plot.df %>%
ggplot( aes(x=Julian, y=log10(exp(Count)+1))) +
geom_ribbon(aes(x=Julian, ymin= log10(exp(Q_2.5)+1),
ymax= log10(exp(Q_97.5)+1) ), fill ="grey",alpha=.7 )+
geom_line(color="red", size=2)+
geom_point(data=stan.df, aes(x=Julian, y=log10(( Count /TrapHours) +1)) )+
ylab("log10(Predicted mosquito count)") +
xlab("Julian date")+ theme_classic()+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
plot.df %>%
ggplot( aes(x=Julian, y=log10((Count*Offset)+1))) +
geom_point(aes(x= Julian, y= Pred*.52),size=1)+
geom_point(color="red", size=.7)+ facet_wrap(~Plot, scales ="free")
plot.df %>%
ggplot( aes(x=Julian, y=log10((Count*Offset)+1), color = as.factor(Year))) +
geom_point(aes(x= Julian, y= Pred*Offset),size=2)+
geom_point(color="black", size=1.5,alpha=.5)+ylab("Mosquito Count") +
xlab("Julian date")
scale_color_brewer(palette = "Set1",
name="Predicted count year")+ theme_classic()+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
plot.df %>%
ggplot( aes(x=Julian, y=log10(Count*Offset+1))) +
geom_ribbon(aes(x=Julian, ymin=0, ymax=(Q_97.5*Offset)))+
geom_point(color="red", size=1.5)+ facet_wrap(~Year, scales ="free")
plot.df %>%
ggplot( aes(x=exp(Q_97.5), y=exp(Pred))) +geom_point() +
geom_abline(slope=1, intercept=0)
cor.test(weather.df$STemp. weather.df$mPPT)
cor.test(weather.df$STemp, weather.df$mPPT)
ar_output3a <- stan( 'Scripts/Stan/Ar_take_3.stan',
data=stan_d, iter = 5000,
control = list(max_treedepth = 20))
print(ar_output3, pars = c("rho", 'beta', "sigma"))
print(ar_output3a, pars = c("rho", 'beta', "sigma"))
post <- extract(ar_output3a)
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
geom_point(data=known.df, aes(x=Pars, y = Value),size=3, color="red")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
plotting rho values
rho.df <- as.data.frame(post$rho)
colnames(rho.df) <- "Rho"
sig.df <- as.data.frame(post$sigma)
colnames(sig.df) <- "Sigma"
## plotting rho values
beta.df <- as.data.frame(post$beta)
colnames(beta.df) <- c("Intercept", "TMin", "PPT", "TMin:PPT")
beta.df <- cbind.data.frame(beta.df, rho.df)
beta.df <- cbind.data.frame(beta.df, sig.df)
beta.df <- tidyr::pivot_longer(beta.df, cols= 1:6, names_to="Parameters",
values_to = "Estimate")
beta.df$Parameters <- factor( beta.df$Parameters, level=c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma"))
known.df <- data.frame( Pars = as.factor(c("Rho", "Intercept", "TMin", "PPT",
"TMin:PPT", "Sigma")),
Value = as.numeric(c(.8,-1,1,-.5,.15,1.5)) )
ggplot(beta.df, aes(x=Parameters, y=Estimate))+  geom_violin(alpha=.5,fill="gray")+
geom_boxplot(color="black", width=.05, outlier.size = 0) +
geom_hline(yintercept = 0, size=1 ) +theme_classic()+
ylab("Estimate")+ xlab("Parameters")+
geom_point(data=known.df, aes(x=Pars, y = Value),size=3, color="red")+
theme( legend.key.size = unit(1.5, "cm"),
legend.title =element_text(size=14,margin = margin(r =10,unit = "pt")),
legend.text=element_text(size=14,margin = margin(r =10, unit = "pt")),
legend.position = "top",
axis.line.x = element_line(color="black") ,
axis.ticks.y = element_line(color="black"),
axis.ticks.x = element_line(color="black"),
axis.title.x = element_text(size = rel(1.8)),
axis.text.x  = element_text(vjust=0.5, color = "black",size=14),
axis.text.y  = element_text(vjust=0.5,color = "black",size=14),
axis.title.y = element_text(size = rel(1.8), angle = 90) ,
strip.text.x = element_text(size=20) )
